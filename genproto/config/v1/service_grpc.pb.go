// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: config/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConfigService_GetLanguages_FullMethodName   = "/config.v1.ConfigService/GetLanguages"
	ConfigService_GetLanguage_FullMethodName    = "/config.v1.ConfigService/GetLanguage"
	ConfigService_AddLanguage_FullMethodName    = "/config.v1.ConfigService/AddLanguage"
	ConfigService_UpdateLanguage_FullMethodName = "/config.v1.ConfigService/UpdateLanguage"
	ConfigService_DeleteLanguage_FullMethodName = "/config.v1.ConfigService/DeleteLanguage"
	ConfigService_GetCompares_FullMethodName    = "/config.v1.ConfigService/GetCompares"
	ConfigService_GetCompare_FullMethodName     = "/config.v1.ConfigService/GetCompare"
	ConfigService_AddCompare_FullMethodName     = "/config.v1.ConfigService/AddCompare"
	ConfigService_UpdateCompare_FullMethodName  = "/config.v1.ConfigService/UpdateCompare"
	ConfigService_DeleteCompare_FullMethodName  = "/config.v1.ConfigService/DeleteCompare"
)

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigServiceClient interface {
	GetLanguages(ctx context.Context, in *GetLanguagesRequest, opts ...grpc.CallOption) (*GetLanguagesResponse, error)
	GetLanguage(ctx context.Context, in *GetLanguageRequest, opts ...grpc.CallOption) (*LanguageResponse, error)
	AddLanguage(ctx context.Context, in *AddLanguageRequest, opts ...grpc.CallOption) (*LanguageResponse, error)
	UpdateLanguage(ctx context.Context, in *UpdateLanguageRequest, opts ...grpc.CallOption) (*LanguageResponse, error)
	DeleteLanguage(ctx context.Context, in *DeleteLanguageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCompares(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetComparesResponse, error)
	GetCompare(ctx context.Context, in *GetCompareRequest, opts ...grpc.CallOption) (*CompareResponse, error)
	AddCompare(ctx context.Context, in *AddCompareRequest, opts ...grpc.CallOption) (*CompareResponse, error)
	UpdateCompare(ctx context.Context, in *UpdateCompareRequest, opts ...grpc.CallOption) (*CompareResponse, error)
	DeleteCompare(ctx context.Context, in *DeleteCompareRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) GetLanguages(ctx context.Context, in *GetLanguagesRequest, opts ...grpc.CallOption) (*GetLanguagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLanguagesResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetLanguage(ctx context.Context, in *GetLanguageRequest, opts ...grpc.CallOption) (*LanguageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) AddLanguage(ctx context.Context, in *AddLanguageRequest, opts ...grpc.CallOption) (*LanguageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageResponse)
	err := c.cc.Invoke(ctx, ConfigService_AddLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateLanguage(ctx context.Context, in *UpdateLanguageRequest, opts ...grpc.CallOption) (*LanguageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LanguageResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteLanguage(ctx context.Context, in *DeleteLanguageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigService_DeleteLanguage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetCompares(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetComparesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetComparesResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetCompares_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetCompare(ctx context.Context, in *GetCompareRequest, opts ...grpc.CallOption) (*CompareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompareResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetCompare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) AddCompare(ctx context.Context, in *AddCompareRequest, opts ...grpc.CallOption) (*CompareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompareResponse)
	err := c.cc.Invoke(ctx, ConfigService_AddCompare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdateCompare(ctx context.Context, in *UpdateCompareRequest, opts ...grpc.CallOption) (*CompareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompareResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdateCompare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteCompare(ctx context.Context, in *DeleteCompareRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConfigService_DeleteCompare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
// All implementations must embed UnimplementedConfigServiceServer
// for forward compatibility.
type ConfigServiceServer interface {
	GetLanguages(context.Context, *GetLanguagesRequest) (*GetLanguagesResponse, error)
	GetLanguage(context.Context, *GetLanguageRequest) (*LanguageResponse, error)
	AddLanguage(context.Context, *AddLanguageRequest) (*LanguageResponse, error)
	UpdateLanguage(context.Context, *UpdateLanguageRequest) (*LanguageResponse, error)
	DeleteLanguage(context.Context, *DeleteLanguageRequest) (*emptypb.Empty, error)
	GetCompares(context.Context, *emptypb.Empty) (*GetComparesResponse, error)
	GetCompare(context.Context, *GetCompareRequest) (*CompareResponse, error)
	AddCompare(context.Context, *AddCompareRequest) (*CompareResponse, error)
	UpdateCompare(context.Context, *UpdateCompareRequest) (*CompareResponse, error)
	DeleteCompare(context.Context, *DeleteCompareRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedConfigServiceServer()
}

// UnimplementedConfigServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConfigServiceServer struct{}

func (UnimplementedConfigServiceServer) GetLanguages(context.Context, *GetLanguagesRequest) (*GetLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguages not implemented")
}
func (UnimplementedConfigServiceServer) GetLanguage(context.Context, *GetLanguageRequest) (*LanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguage not implemented")
}
func (UnimplementedConfigServiceServer) AddLanguage(context.Context, *AddLanguageRequest) (*LanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLanguage not implemented")
}
func (UnimplementedConfigServiceServer) UpdateLanguage(context.Context, *UpdateLanguageRequest) (*LanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLanguage not implemented")
}
func (UnimplementedConfigServiceServer) DeleteLanguage(context.Context, *DeleteLanguageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLanguage not implemented")
}
func (UnimplementedConfigServiceServer) GetCompares(context.Context, *emptypb.Empty) (*GetComparesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompares not implemented")
}
func (UnimplementedConfigServiceServer) GetCompare(context.Context, *GetCompareRequest) (*CompareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompare not implemented")
}
func (UnimplementedConfigServiceServer) AddCompare(context.Context, *AddCompareRequest) (*CompareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCompare not implemented")
}
func (UnimplementedConfigServiceServer) UpdateCompare(context.Context, *UpdateCompareRequest) (*CompareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompare not implemented")
}
func (UnimplementedConfigServiceServer) DeleteCompare(context.Context, *DeleteCompareRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompare not implemented")
}
func (UnimplementedConfigServiceServer) mustEmbedUnimplementedConfigServiceServer() {}
func (UnimplementedConfigServiceServer) testEmbeddedByValue()                       {}

// UnsafeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServiceServer will
// result in compilation errors.
type UnsafeConfigServiceServer interface {
	mustEmbedUnimplementedConfigServiceServer()
}

func RegisterConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConfigService_ServiceDesc, srv)
}

func _ConfigService_GetLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetLanguages(ctx, req.(*GetLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetLanguage(ctx, req.(*GetLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_AddLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).AddLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_AddLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).AddLanguage(ctx, req.(*AddLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateLanguage(ctx, req.(*UpdateLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_DeleteLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteLanguage(ctx, req.(*DeleteLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetCompares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetCompares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetCompares_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetCompares(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetCompare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetCompare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetCompare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetCompare(ctx, req.(*GetCompareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_AddCompare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCompareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).AddCompare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_AddCompare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).AddCompare(ctx, req.(*AddCompareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdateCompare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdateCompare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdateCompare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdateCompare(ctx, req.(*UpdateCompareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteCompare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteCompare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_DeleteCompare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteCompare(ctx, req.(*DeleteCompareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.v1.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLanguages",
			Handler:    _ConfigService_GetLanguages_Handler,
		},
		{
			MethodName: "GetLanguage",
			Handler:    _ConfigService_GetLanguage_Handler,
		},
		{
			MethodName: "AddLanguage",
			Handler:    _ConfigService_AddLanguage_Handler,
		},
		{
			MethodName: "UpdateLanguage",
			Handler:    _ConfigService_UpdateLanguage_Handler,
		},
		{
			MethodName: "DeleteLanguage",
			Handler:    _ConfigService_DeleteLanguage_Handler,
		},
		{
			MethodName: "GetCompares",
			Handler:    _ConfigService_GetCompares_Handler,
		},
		{
			MethodName: "GetCompare",
			Handler:    _ConfigService_GetCompare_Handler,
		},
		{
			MethodName: "AddCompare",
			Handler:    _ConfigService_AddCompare_Handler,
		},
		{
			MethodName: "UpdateCompare",
			Handler:    _ConfigService_UpdateCompare_Handler,
		},
		{
			MethodName: "DeleteCompare",
			Handler:    _ConfigService_DeleteCompare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config/v1/service.proto",
}
